import {
	getTotalStepForBubbleSort,
	getArrayStateInSpecificStep,
} from "./bubbleSortUtils";

describe("Test bubble sort util functions", () => {
	let initialArr;
	beforeEach(() => {
		initialArr = [
			{
				id: 1,
				initialNumber: 5,
				currentNumber: 5,
				currentNumberID: 1,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 0,
				curIndex: 0,
				isOrdered: false,
			},
			{
				id: 2,
				initialNumber: 1,
				currentNumber: 1,
				currentNumberID: 2,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 1,
				curIndex: 1,
				isOrdered: false,
			},
			{
				id: 3,
				initialNumber: 3,
				currentNumber: 3,
				currentNumberID: 3,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 2,
				curIndex: 2,
				isOrdered: false,
			},
			{
				id: 4,
				initialNumber: 2,
				currentNumber: 2,
				currentNumberID: 4,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 3,
				curIndex: 3,
				isOrdered: false,
			},
			{
				id: 5,
				initialNumber: 4,
				currentNumber: 4,
				currentNumberID: 5,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 4,
				curIndex: 4,
				isOrdered: false,
			},
		];
	});
	it("should return total step Info required for bubble sort", () => {
		const stepsInfo = getTotalStepForBubbleSort(initialArr);

		expect(stepsInfo).toStrictEqual([
			{
				step: 0,
				outerIndex: -1,
				innerIndex: -1,
				done: false,
			},
			{
				step: 1,
				outerIndex: 0,
				innerIndex: 0,
				willSwap: true,
				done: false,
			},
			{
				step: 2,
				outerIndex: 0,
				innerIndex: 1,
				willSwap: true,
				done: false,
			},
			{
				step: 3,
				outerIndex: 0,
				innerIndex: 2,
				willSwap: true,
				done: false,
			},
			{
				step: 4,
				outerIndex: 0,
				innerIndex: 3,
				willSwap: true,
				done: false,
			},
			{
				step: 5,
				outerIndex: 1,
				innerIndex: 0,
				willSwap: false,
				done: false,
			},
			{
				step: 6,
				outerIndex: 1,
				innerIndex: 1,
				willSwap: true,
				done: false,
			},
			{
				step: 7,
				outerIndex: 1,
				innerIndex: 2,
				willSwap: false,
				done: false,
			},
			{
				step: 8,
				outerIndex: 2,
				innerIndex: 0,
				willSwap: false,
				done: false,
			},
			{
				step: 9,
				outerIndex: 2,
				innerIndex: 1,
				willSwap: false,
				done: false,
			},
			{
				step: 10,
				outerIndex: 2,
				innerIndex: 1,
				willSwap: false,
				done: true,
			},
		]);
	});

	it("should return the elements of an array in a specific state.", () => {
		const stepsInfo = [
			{
				step: 0,
				outerIndex: -1,
				innerIndex: -1,
				done: false,
			},
			{
				step: 1,
				outerIndex: 0,
				innerIndex: 0,
				willSwap: true,
				done: false,
			},
			{
				step: 2,
				outerIndex: 0,
				innerIndex: 1,
				willSwap: true,
				done: false,
			},
			{
				step: 3,
				outerIndex: 0,
				innerIndex: 2,
				willSwap: true,
				done: false,
			},
			{
				step: 4,
				outerIndex: 0,
				innerIndex: 3,
				willSwap: true,
				done: false,
			},
			{
				step: 5,
				outerIndex: 1,
				innerIndex: 0,
				willSwap: false,
				done: false,
			},
			{
				step: 6,
				outerIndex: 1,
				innerIndex: 1,
				willSwap: true,
				done: false,
			},
			{
				step: 7,
				outerIndex: 1,
				innerIndex: 2,
				willSwap: false,
				done: false,
			},
			{
				step: 8,
				outerIndex: 2,
				innerIndex: 0,
				willSwap: false,
				done: false,
			},
			{
				step: 9,
				outerIndex: 2,
				innerIndex: 1,
				willSwap: false,
				done: false,
			},
			{
				step: 10,
				outerIndex: 2,
				innerIndex: 1,
				willSwap: false,
				done: true,
			},
		];

		const specificArrInStep0 = getArrayStateInSpecificStep(
			stepsInfo[0],
			initialArr,
		);
		expect(specificArrInStep0).toStrictEqual([
			{
				id: 1,
				initialNumber: 5,
				currentNumber: 5,
				currentNumberID: 1,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 0,
				curIndex: 0,
				isOrdered: false,
			},
			{
				id: 2,
				initialNumber: 1,
				currentNumber: 1,
				currentNumberID: 2,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 1,
				curIndex: 1,
				isOrdered: false,
			},
			{
				id: 3,
				initialNumber: 3,
				currentNumber: 3,
				currentNumberID: 3,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 2,
				curIndex: 2,
				isOrdered: false,
			},
			{
				id: 4,
				initialNumber: 2,
				currentNumber: 2,
				currentNumberID: 4,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 3,
				curIndex: 3,
				isOrdered: false,
			},
			{
				id: 5,
				initialNumber: 4,
				currentNumber: 4,
				currentNumberID: 5,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 4,
				curIndex: 4,
				isOrdered: false,
			},
		]);

		const specificArrInStep1 = getArrayStateInSpecificStep(
			stepsInfo[1],
			initialArr,
		);
		expect(specificArrInStep1).toStrictEqual([
			{
				id: 1,
				initialNumber: 5,
				currentNumber: 5,
				currentNumberID: 1,
				isSelecting: true,
				isSwapping: false,
				initialIndex: 0,
				curIndex: 0,
				isOrdered: false,
			},
			{
				id: 2,
				initialNumber: 1,
				currentNumber: 1,
				currentNumberID: 2,
				isSelecting: true,
				isSwapping: false,
				initialIndex: 1,
				curIndex: 1,
				isOrdered: false,
			},
			{
				id: 3,
				initialNumber: 3,
				currentNumber: 3,
				currentNumberID: 3,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 2,
				curIndex: 2,
				isOrdered: false,
			},
			{
				id: 4,
				initialNumber: 2,
				currentNumber: 2,
				currentNumberID: 4,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 3,
				curIndex: 3,
				isOrdered: false,
			},
			{
				id: 5,
				initialNumber: 4,
				currentNumber: 4,
				currentNumberID: 5,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 4,
				curIndex: 4,
				isOrdered: false,
			},
		]);

		const specificArrInStep2 = getArrayStateInSpecificStep(
			stepsInfo[2],
			initialArr,
		);
		expect(specificArrInStep2).toStrictEqual([
			{
				id: 1,
				initialNumber: 5,
				// currentNumber: 5,
				currentNumber: 1,
				// currentNumberID: 1,
				currentNumberID: 2,
				isSelecting: true,
				isSwapping: false,
				initialIndex: 0,
				curIndex: 1,
				isOrdered: false,
			},
			{
				id: 2,
				initialNumber: 1,
				// currentNumber: 1,
				currentNumber: 5,
				// currentNumberID: 2,
				currentNumberID: 1,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 1,
				curIndex: 0,
				isOrdered: false,
			},
			{
				id: 3,
				initialNumber: 3,
				currentNumber: 3,
				currentNumberID: 3,
				isSelecting: true,
				isSwapping: false,
				initialIndex: 2,
				curIndex: 2,
				isOrdered: false,
			},
			{
				id: 4,
				initialNumber: 2,
				currentNumber: 2,
				currentNumberID: 4,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 3,
				curIndex: 3,
				isOrdered: false,
			},
			{
				id: 5,
				initialNumber: 4,
				currentNumber: 4,
				currentNumberID: 5,
				isSelecting: false,
				isSwapping: false,
				initialIndex: 4,
				curIndex: 4,
				isOrdered: false,
			},
		]);
	});
});
